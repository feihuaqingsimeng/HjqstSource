//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Game_Model_GameResDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Game.Model.GameResData), typeof(System.Object));
		L.RegFunction("set", set);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateLogic_Game_Model_GameResData);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("type", get_type, set_type);
		L.RegVar("id", get_id, set_id);
		L.RegVar("count", get_count, set_count);
		L.RegVar("star", get_star, set_star);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLogic_Game_Model_GameResData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Logic.Game.Model.GameResData obj = new Logic.Game.Model.GameResData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(string)))
			{
				string arg0 = ToLua.CheckString(L, 1);
				Logic.Game.Model.GameResData obj = new Logic.Game.Model.GameResData(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(int), typeof(int), typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				Logic.Game.Model.GameResData obj = new Logic.Game.Model.GameResData(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Enums.BaseResType), typeof(int), typeof(int), typeof(int)))
			{
				Logic.Enums.BaseResType arg0 = (Logic.Enums.BaseResType)ToLua.CheckObject(L, 1, typeof(Logic.Enums.BaseResType));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				Logic.Game.Model.GameResData obj = new Logic.Game.Model.GameResData(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Logic.Game.Model.GameResData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)ToLua.CheckObject(L, 1, typeof(Logic.Game.Model.GameResData));
			Logic.Enums.BaseResType arg0 = (Logic.Enums.BaseResType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.BaseResType));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.set(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)ToLua.CheckObject(L, 1, typeof(Logic.Game.Model.GameResData));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			Logic.Enums.BaseResType ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int ret = obj.count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_star(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int ret = obj.star;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index star on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			Logic.Enums.BaseResType arg0 = (Logic.Enums.BaseResType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.BaseResType));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.count = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_star(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Game.Model.GameResData obj = (Logic.Game.Model.GameResData)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.star = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index star on a nil value" : e.Message);
		}
	}
}

