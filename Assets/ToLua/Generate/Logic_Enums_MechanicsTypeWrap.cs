//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Enums_MechanicsTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Logic.Enums.MechanicsType));
		L.RegVar("None", get_None, null);
		L.RegVar("Damage", get_Damage, null);
		L.RegVar("Treat", get_Treat, null);
		L.RegVar("Poisoning", get_Poisoning, null);
		L.RegVar("LastTreat", get_LastTreat, null);
		L.RegVar("IgnoreDefenseDamage", get_IgnoreDefenseDamage, null);
		L.RegVar("Swimmy", get_Swimmy, null);
		L.RegVar("Float", get_Float, null);
		L.RegVar("Tumble", get_Tumble, null);
		L.RegVar("Invincible", get_Invincible, null);
		L.RegVar("Silence", get_Silence, null);
		L.RegVar("Blind", get_Blind, null);
		L.RegVar("Frozen", get_Frozen, null);
		L.RegVar("TreatPercent", get_TreatPercent, null);
		L.RegVar("Ignite", get_Ignite, null);
		L.RegVar("Bleed", get_Bleed, null);
		L.RegVar("Sleep", get_Sleep, null);
		L.RegVar("Landification", get_Landification, null);
		L.RegVar("Tieup", get_Tieup, null);
		L.RegVar("Reborn", get_Reborn, null);
		L.RegVar("Disperse", get_Disperse, null);
		L.RegVar("Immune", get_Immune, null);
		L.RegVar("ReboundTime", get_ReboundTime, null);
		L.RegVar("ReboundValue", get_ReboundValue, null);
		L.RegVar("RandomMechanics", get_RandomMechanics, null);
		L.RegVar("DrainDamage", get_DrainDamage, null);
		L.RegVar("ImmunePhysicsAttack", get_ImmunePhysicsAttack, null);
		L.RegVar("ImmuneMagicAttack", get_ImmuneMagicAttack, null);
		L.RegVar("Tag", get_Tag, null);
		L.RegVar("GeneralSkillHit", get_GeneralSkillHit, null);
		L.RegVar("GeneralSkillCrit", get_GeneralSkillCrit, null);
		L.RegVar("AccumulatorTag", get_AccumulatorTag, null);
		L.RegVar("ImmediatePercentDamage", get_ImmediatePercentDamage, null);
		L.RegVar("SwimmyExtraDamage", get_SwimmyExtraDamage, null);
		L.RegVar("LandificationExtraDamage", get_LandificationExtraDamage, null);
		L.RegVar("BleedExtraDamage", get_BleedExtraDamage, null);
		L.RegVar("FrozenExtraDamage", get_FrozenExtraDamage, null);
		L.RegVar("PoisoningExtraDamage", get_PoisoningExtraDamage, null);
		L.RegVar("TagExtraDamage", get_TagExtraDamage, null);
		L.RegVar("IgniteExtraDamage", get_IgniteExtraDamage, null);
		L.RegVar("ShieldTime", get_ShieldTime, null);
		L.RegVar("ShieldValue", get_ShieldValue, null);
		L.RegVar("DrainTime", get_DrainTime, null);
		L.RegVar("DrainValue", get_DrainValue, null);
		L.RegVar("ForceKill", get_ForceKill, null);
		L.RegVar("PhysicsDefensePercentTime", get_PhysicsDefensePercentTime, null);
		L.RegVar("PhysicsDefensePercentValue", get_PhysicsDefensePercentValue, null);
		L.RegVar("MagicDefensePercentTime", get_MagicDefensePercentTime, null);
		L.RegVar("MagicDefensePercentValue", get_MagicDefensePercentValue, null);
		L.RegVar("PhysicsAttackPercentTime", get_PhysicsAttackPercentTime, null);
		L.RegVar("PhysicsAttackPercentValue", get_PhysicsAttackPercentValue, null);
		L.RegVar("MagicAttackPercentTime", get_MagicAttackPercentTime, null);
		L.RegVar("MagicAttackPercentValue", get_MagicAttackPercentValue, null);
		L.RegVar("HPLimitPercentTime", get_HPLimitPercentTime, null);
		L.RegVar("HPLimitPercentValue", get_HPLimitPercentValue, null);
		L.RegVar("SpeedPercentTime", get_SpeedPercentTime, null);
		L.RegVar("SpeedPercentValue", get_SpeedPercentValue, null);
		L.RegVar("PhysicsDefenseFixedTime", get_PhysicsDefenseFixedTime, null);
		L.RegVar("PhysicsDefenseFixedValue", get_PhysicsDefenseFixedValue, null);
		L.RegVar("MagicDefenseFixedTime", get_MagicDefenseFixedTime, null);
		L.RegVar("MagicDefenseFixedValue", get_MagicDefenseFixedValue, null);
		L.RegVar("PhysicsAttackFixedTime", get_PhysicsAttackFixedTime, null);
		L.RegVar("PhysicsAttackFixedValue", get_PhysicsAttackFixedValue, null);
		L.RegVar("MagicAttackFixedTime", get_MagicAttackFixedTime, null);
		L.RegVar("MagicAttackFixedValue", get_MagicAttackFixedValue, null);
		L.RegVar("HPLimitFixedTime", get_HPLimitFixedTime, null);
		L.RegVar("HPLimitFixedValue", get_HPLimitFixedValue, null);
		L.RegVar("SpeedFixedTime", get_SpeedFixedTime, null);
		L.RegVar("SpeedFixedValue", get_SpeedFixedValue, null);
		L.RegVar("HitTime", get_HitTime, null);
		L.RegVar("HitValue", get_HitValue, null);
		L.RegVar("DodgeTime", get_DodgeTime, null);
		L.RegVar("DodgeValue", get_DodgeValue, null);
		L.RegVar("CritTime", get_CritTime, null);
		L.RegVar("CritValue", get_CritValue, null);
		L.RegVar("AntiCritTime", get_AntiCritTime, null);
		L.RegVar("AntiCritValue", get_AntiCritValue, null);
		L.RegVar("BlockTime", get_BlockTime, null);
		L.RegVar("BlockValue", get_BlockValue, null);
		L.RegVar("AntiBlockTime", get_AntiBlockTime, null);
		L.RegVar("AntiBlockValue", get_AntiBlockValue, null);
		L.RegVar("CounterAtkTime", get_CounterAtkTime, null);
		L.RegVar("CounterAtkValue", get_CounterAtkValue, null);
		L.RegVar("CritHurtAddTime", get_CritHurtAddTime, null);
		L.RegVar("CritHurtAddValue", get_CritHurtAddValue, null);
		L.RegVar("CritHurtDecTime", get_CritHurtDecTime, null);
		L.RegVar("CritHurtDecValue", get_CritHurtDecValue, null);
		L.RegVar("ArmorTime", get_ArmorTime, null);
		L.RegVar("ArmorValue", get_ArmorValue, null);
		L.RegVar("DamageDecTime", get_DamageDecTime, null);
		L.RegVar("DamageDecValue", get_DamageDecValue, null);
		L.RegVar("DamageAddTime", get_DamageAddTime, null);
		L.RegVar("DamageAddValue", get_DamageAddValue, null);
		L.RegVar("PhysicsDamageAddTime", get_PhysicsDamageAddTime, null);
		L.RegVar("PhysicsDamageAddValue", get_PhysicsDamageAddValue, null);
		L.RegVar("MagicDamageAddTime", get_MagicDamageAddTime, null);
		L.RegVar("MagicDamageAddValue", get_MagicDamageAddValue, null);
		L.RegVar("Transform", get_Transform, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Damage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Damage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Treat(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Treat);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Poisoning(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Poisoning);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastTreat(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.LastTreat);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgnoreDefenseDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.IgnoreDefenseDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Swimmy(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Swimmy);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Float);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tumble(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Tumble);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Invincible(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Invincible);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Silence(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Silence);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Blind(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Blind);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Frozen(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Frozen);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TreatPercent(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.TreatPercent);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ignite(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Ignite);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bleed(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Bleed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sleep(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Sleep);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Landification(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Landification);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tieup(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Tieup);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reborn(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Reborn);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Disperse(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Disperse);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Immune(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Immune);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReboundTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ReboundTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReboundValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ReboundValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RandomMechanics(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.RandomMechanics);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DrainDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DrainDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmunePhysicsAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ImmunePhysicsAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmuneMagicAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ImmuneMagicAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Tag);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillHit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.GeneralSkillHit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillCrit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.GeneralSkillCrit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccumulatorTag(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.AccumulatorTag);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmediatePercentDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ImmediatePercentDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SwimmyExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.SwimmyExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LandificationExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.LandificationExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BleedExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.BleedExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrozenExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.FrozenExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PoisoningExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PoisoningExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TagExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.TagExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IgniteExtraDamage(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.IgniteExtraDamage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShieldTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ShieldTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShieldValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ShieldValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DrainTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DrainTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DrainValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DrainValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ForceKill(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ForceKill);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDefensePercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDefensePercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDefensePercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDefensePercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDefensePercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDefensePercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDefensePercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDefensePercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsAttackPercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsAttackPercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsAttackPercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsAttackPercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicAttackPercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicAttackPercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicAttackPercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicAttackPercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPLimitPercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HPLimitPercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPLimitPercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HPLimitPercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpeedPercentTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.SpeedPercentTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpeedPercentValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.SpeedPercentValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDefenseFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDefenseFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDefenseFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDefenseFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDefenseFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDefenseFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDefenseFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDefenseFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsAttackFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsAttackFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsAttackFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsAttackFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicAttackFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicAttackFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicAttackFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicAttackFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPLimitFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HPLimitFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPLimitFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HPLimitFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpeedFixedTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.SpeedFixedTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpeedFixedValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.SpeedFixedValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HitTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HitTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HitValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.HitValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DodgeTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DodgeTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DodgeValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DodgeValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiCritTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.AntiCritTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiCritValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.AntiCritValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.BlockTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlockValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.BlockValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiBlockTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.AntiBlockTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiBlockValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.AntiBlockValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CounterAtkTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CounterAtkTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CounterAtkValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CounterAtkValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtAddTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritHurtAddTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtAddValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritHurtAddValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtDecTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritHurtDecTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtDecValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.CritHurtDecValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ArmorTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ArmorTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ArmorValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.ArmorValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageDecTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DamageDecTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageDecValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DamageDecValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageAddTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DamageAddTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageAddValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.DamageAddValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDamageAddTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDamageAddTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDamageAddValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.PhysicsDamageAddValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDamageAddTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDamageAddTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDamageAddValue(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.MagicDamageAddValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Transform(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.MechanicsType.Transform);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Logic.Enums.MechanicsType o = (Logic.Enums.MechanicsType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

