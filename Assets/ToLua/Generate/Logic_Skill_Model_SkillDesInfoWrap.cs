//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Skill_Model_SkillDesInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Skill.Model.SkillDesInfo), typeof(System.Object));
		L.RegFunction("New", _CreateLogic_Skill_Model_SkillDesInfo);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("mechanicsType", get_mechanicsType, set_mechanicsType);
		L.RegVar("target", get_target, set_target);
		L.RegVar("mechanicsValueType", get_mechanicsValueType, set_mechanicsValueType);
		L.RegVar("mechanicsValue1", get_mechanicsValue1, set_mechanicsValue1);
		L.RegVar("mechanicsValue2", get_mechanicsValue2, set_mechanicsValue2);
		L.RegVar("isGrowup", get_isGrowup, set_isGrowup);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLogic_Skill_Model_SkillDesInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				Logic.Enums.MechanicsType arg0 = (Logic.Enums.MechanicsType)ToLua.CheckObject(L, 1, typeof(Logic.Enums.MechanicsType));
				Logic.Enums.TargetType arg1 = (Logic.Enums.TargetType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.TargetType));
				Logic.Enums.MechanicsValueType arg2 = (Logic.Enums.MechanicsValueType)ToLua.CheckObject(L, 3, typeof(Logic.Enums.MechanicsValueType));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				Logic.Skill.Model.SkillDesInfo obj = new Logic.Skill.Model.SkillDesInfo(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Logic.Skill.Model.SkillDesInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mechanicsType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.MechanicsType ret = obj.mechanicsType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.TargetType ret = obj.target;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mechanicsValueType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.MechanicsValueType ret = obj.mechanicsValueType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValueType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mechanicsValue1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			float ret = obj.mechanicsValue1;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValue1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mechanicsValue2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			float ret = obj.mechanicsValue2;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValue2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isGrowup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			bool ret = obj.isGrowup;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isGrowup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mechanicsType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.MechanicsType arg0 = (Logic.Enums.MechanicsType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.MechanicsType));
			obj.mechanicsType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_target(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.TargetType arg0 = (Logic.Enums.TargetType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.TargetType));
			obj.target = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index target on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mechanicsValueType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			Logic.Enums.MechanicsValueType arg0 = (Logic.Enums.MechanicsValueType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.MechanicsValueType));
			obj.mechanicsValueType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValueType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mechanicsValue1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mechanicsValue1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValue1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mechanicsValue2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mechanicsValue2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mechanicsValue2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isGrowup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Skill.Model.SkillDesInfo obj = (Logic.Skill.Model.SkillDesInfo)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isGrowup = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isGrowup on a nil value" : e.Message);
		}
	}
}

