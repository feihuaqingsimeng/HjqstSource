//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Skill_SkillUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("SkillUtil");
		L.RegFunction("GetMechanicsValueType", GetMechanicsValueType);
		L.RegFunction("AttackableNormal", AttackableNormal);
		L.RegFunction("AttackableFloat", AttackableFloat);
		L.RegFunction("AttackableTumble", AttackableTumble);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMechanicsValueType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.Collections.Generic.List<Logic.Skill.Model.SkillDesInfo> o = Logic.Skill.SkillUtil.GetMechanicsValueType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackableNormal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillData)))
			{
				Logic.Skill.Model.SkillData arg0 = (Logic.Skill.Model.SkillData)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableNormal(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillInfo)))
			{
				Logic.Skill.Model.SkillInfo arg0 = (Logic.Skill.Model.SkillInfo)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableNormal(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Skill.SkillUtil.AttackableNormal");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackableFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillData)))
			{
				Logic.Skill.Model.SkillData arg0 = (Logic.Skill.Model.SkillData)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableFloat(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillInfo)))
			{
				Logic.Skill.Model.SkillInfo arg0 = (Logic.Skill.Model.SkillInfo)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableFloat(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Skill.SkillUtil.AttackableFloat");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackableTumble(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillData)))
			{
				Logic.Skill.Model.SkillData arg0 = (Logic.Skill.Model.SkillData)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableTumble(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Skill.Model.SkillInfo)))
			{
				Logic.Skill.Model.SkillInfo arg0 = (Logic.Skill.Model.SkillInfo)ToLua.ToObject(L, 1);
				bool o = Logic.Skill.SkillUtil.AttackableTumble(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Skill.SkillUtil.AttackableTumble");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

