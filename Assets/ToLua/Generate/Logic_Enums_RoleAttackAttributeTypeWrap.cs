//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Enums_RoleAttackAttributeTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Logic.Enums.RoleAttackAttributeType));
		L.RegVar("Invalid", get_Invalid, null);
		L.RegVar("PhysicalAttack", get_PhysicalAttack, null);
		L.RegVar("MagicalAttack", get_MagicalAttack, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Invalid(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.RoleAttackAttributeType.Invalid);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicalAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.RoleAttackAttributeType.PhysicalAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicalAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.RoleAttackAttributeType.MagicalAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Logic.Enums.RoleAttackAttributeType o = (Logic.Enums.RoleAttackAttributeType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

