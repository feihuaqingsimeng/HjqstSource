//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Enums_SkillTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Logic.Enums.SkillType));
		L.RegVar("None", get_None, null);
		L.RegVar("Hit", get_Hit, null);
		L.RegVar("Skill", get_Skill, null);
		L.RegVar("Aeon", get_Aeon, null);
		L.RegVar("Passive", get_Passive, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.SkillType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.SkillType.Hit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Skill(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.SkillType.Skill);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Aeon(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.SkillType.Aeon);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Passive(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.SkillType.Passive);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Logic.Enums.SkillType o = (Logic.Enums.SkillType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

