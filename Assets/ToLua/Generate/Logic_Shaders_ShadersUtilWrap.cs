//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Shaders_ShadersUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Shaders.ShadersUtil), typeof(System.Object));
		L.RegFunction("SetShader", SetShader);
		L.RegFunction("SetShaderKeyword", SetShaderKeyword);
		L.RegFunction("SetMainColor", SetMainColor);
		L.RegFunction("SetColor", SetColor);
		L.RegFunction("SetRimPow", SetRimPow);
		L.RegFunction("New", _CreateLogic_Shaders_ShadersUtil);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("CLIP_POSITION_OFF", get_CLIP_POSITION_OFF, null);
		L.RegVar("CLIP_POSITION_ON", get_CLIP_POSITION_ON, null);
		L.RegVar("RIMLIGHT_ON", get_RIMLIGHT_ON, null);
		L.RegVar("RIMLIGHT_OFF", get_RIMLIGHT_OFF, null);
		L.RegVar("BODY_ON", get_BODY_ON, null);
		L.RegVar("BODY_OFF", get_BODY_OFF, null);
		L.RegVar("Unlit_Transparent", get_Unlit_Transparent, null);
		L.RegVar("Custom_Rim_Lighting_Surf", get_Custom_Rim_Lighting_Surf, null);
		L.RegVar("RIM_COLOR_ID", get_RIM_COLOR_ID, set_RIM_COLOR_ID);
		L.RegVar("RIM_POWER_ID", get_RIM_POWER_ID, set_RIM_POWER_ID);
		L.RegVar("MAIN_COLOR", get_MAIN_COLOR, set_MAIN_COLOR);
		L.RegVar("RIM_COLOR", get_RIM_COLOR, set_RIM_COLOR);
		L.RegVar("RIM_MAIN_COLOR", get_RIM_MAIN_COLOR, set_RIM_MAIN_COLOR);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLogic_Shaders_ShadersUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Logic.Shaders.ShadersUtil obj = new Logic.Shaders.ShadersUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Logic.Shaders.ShadersUtil.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Character.CharacterEntity o = Logic.Shaders.ShadersUtil.SetShader(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShaderKeyword(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 1, typeof(Logic.Character.CharacterEntity));
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			Logic.Character.CharacterEntity o = Logic.Shaders.ShadersUtil.SetShaderKeyword(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMainColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 1, typeof(Logic.Character.CharacterEntity));
			UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
			Logic.Character.CharacterEntity o = Logic.Shaders.ShadersUtil.SetMainColor(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 1, typeof(Logic.Character.CharacterEntity));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 3);
			Logic.Character.CharacterEntity o = Logic.Shaders.ShadersUtil.SetColor(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRimPow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 1, typeof(Logic.Character.CharacterEntity));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.CharacterEntity o = Logic.Shaders.ShadersUtil.SetRimPow(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CLIP_POSITION_OFF(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.CLIP_POSITION_OFF);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CLIP_POSITION_ON(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.CLIP_POSITION_ON);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIMLIGHT_ON(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.RIMLIGHT_ON);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIMLIGHT_OFF(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.RIMLIGHT_OFF);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BODY_ON(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.BODY_ON);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BODY_OFF(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.BODY_OFF);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Unlit_Transparent(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.Unlit_Transparent);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Custom_Rim_Lighting_Surf(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Shaders.ShadersUtil.Custom_Rim_Lighting_Surf);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIM_COLOR_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Logic.Shaders.ShadersUtil.RIM_COLOR_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIM_POWER_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Logic.Shaders.ShadersUtil.RIM_POWER_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAIN_COLOR(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Logic.Shaders.ShadersUtil.MAIN_COLOR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIM_COLOR(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Logic.Shaders.ShadersUtil.RIM_COLOR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RIM_MAIN_COLOR(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Logic.Shaders.ShadersUtil.RIM_MAIN_COLOR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RIM_COLOR_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Logic.Shaders.ShadersUtil.RIM_COLOR_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RIM_POWER_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Logic.Shaders.ShadersUtil.RIM_POWER_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAIN_COLOR(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Logic.Shaders.ShadersUtil.MAIN_COLOR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RIM_COLOR(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Logic.Shaders.ShadersUtil.RIM_COLOR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RIM_MAIN_COLOR(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			Logic.Shaders.ShadersUtil.RIM_MAIN_COLOR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

