//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_UI_SoftGuide_Model_SoftGuideProxyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.UI.SoftGuide.Model.SoftGuideProxy), typeof(SingletonMono<Logic.UI.SoftGuide.Model.SoftGuideProxy>));
		L.RegFunction("Init", Init);
		L.RegFunction("UpdateSoftGuideByLua", UpdateSoftGuideByLua);
		L.RegFunction("UpdateSoftGuide", UpdateSoftGuide);
		L.RegFunction("OnClickSoftGuideView", OnClickSoftGuideView);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("FunctionOpenDelegate", get_FunctionOpenDelegate, set_FunctionOpenDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)ToLua.CheckObject(L, 1, typeof(Logic.UI.SoftGuide.Model.SoftGuideProxy));
			obj.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateSoftGuideByLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)ToLua.CheckObject(L, 1, typeof(Logic.UI.SoftGuide.Model.SoftGuideProxy));
			Observers.Interfaces.INotification arg0 = (Observers.Interfaces.INotification)ToLua.CheckObject(L, 2, typeof(Observers.Interfaces.INotification));
			bool o = obj.UpdateSoftGuideByLua(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateSoftGuide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)ToLua.CheckObject(L, 1, typeof(Logic.UI.SoftGuide.Model.SoftGuideProxy));
			obj.UpdateSoftGuide();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnClickSoftGuideView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)ToLua.CheckObject(L, 1, typeof(Logic.UI.SoftGuide.Model.SoftGuideProxy));
			Logic.UI.SoftGuide.View.SoftGuideView arg0 = (Logic.UI.SoftGuide.View.SoftGuideView)ToLua.CheckUnityObject(L, 2, typeof(Logic.UI.SoftGuide.View.SoftGuideView));
			obj.OnClickSoftGuideView(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FunctionOpenDelegate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)o;
			System.Action ret = obj.FunctionOpenDelegate;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FunctionOpenDelegate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FunctionOpenDelegate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.UI.SoftGuide.Model.SoftGuideProxy obj = (Logic.UI.SoftGuide.Model.SoftGuideProxy)o;
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.FunctionOpenDelegate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FunctionOpenDelegate on a nil value" : e.Message);
		}
	}
}

