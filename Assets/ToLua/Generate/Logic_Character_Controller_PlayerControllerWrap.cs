//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Character_Controller_PlayerControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Character.Controller.PlayerController), typeof(SingletonMono<Logic.Character.Controller.PlayerController>));
		L.RegFunction("GetComboHero", GetComboHero);
		L.RegFunction("GetHeroInfo", GetHeroInfo);
		L.RegFunction("GetPlayerInfo", GetPlayerInfo);
		L.RegFunction("SortSkillInfos", SortSkillInfos);
		L.RegFunction("CreateHeros", CreateHeros);
		L.RegFunction("CloneHero", CloneHero);
		L.RegFunction("CreateAeon", CreateAeon);
		L.RegFunction("ClearHeros", ClearHeros);
		L.RegFunction("ClearComboHeros", ClearComboHeros);
		L.RegFunction("ClearAeons", ClearAeons);
		L.RegFunction("SetHerosCD2Zero", SetHerosCD2Zero);
		L.RegFunction("Reborn", Reborn);
		L.RegFunction("Run_Scene", Run_Scene);
		L.RegFunction("Victory_Scene", Victory_Scene);
		L.RegFunction("RunWithoutMove_Scene", RunWithoutMove_Scene);
		L.RegFunction("EndRun_Scene", EndRun_Scene);
		L.RegFunction("HeroTrigger", HeroTrigger);
		L.RegFunction("ShowHPBarViews", ShowHPBarViews);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("GetDeadHeroById", GetDeadHeroById);
		L.RegFunction("RemoveLimitBuffs", RemoveLimitBuffs);
		L.RegFunction("AddHaloBuff", AddHaloBuff);
		L.RegFunction("RemoveEnemyHaloBuff", RemoveEnemyHaloBuff);
		L.RegFunction("AddFormationBuff", AddFormationBuff);
		L.RegFunction("Remove", Remove);
		L.RegFunction("SwitchHeros", SwitchHeros);
		L.RegFunction("ResetComboSkill", ResetComboSkill);
		L.RegFunction("HasFloatHeros", HasFloatHeros);
		L.RegFunction("HasTumbleHeros", HasTumbleHeros);
		L.RegFunction("CanFlaot", CanFlaot);
		L.RegFunction("CanSkill1Float", CanSkill1Float);
		L.RegFunction("CanSkill2Float", CanSkill2Float);
		L.RegFunction("CanTumble", CanTumble);
		L.RegFunction("CanSkill1Tumble", CanSkill1Tumble);
		L.RegFunction("CanSkill2Tumble", CanSkill2Tumble);
		L.RegFunction("HasCanOrderFloatHeros", HasCanOrderFloatHeros);
		L.RegFunction("HasCanOrderTumbleHeros", HasCanOrderTumbleHeros);
		L.RegFunction("CanOrderFlaot", CanOrderFlaot);
		L.RegFunction("CanOrderSkill1Float", CanOrderSkill1Float);
		L.RegFunction("CanOrderSkill2Float", CanOrderSkill2Float);
		L.RegFunction("CanOrderTumble", CanOrderTumble);
		L.RegFunction("CanOrderSkill1Tumble", CanOrderSkill1Tumble);
		L.RegFunction("CanOrderSkill2Tumble", CanOrderSkill2Tumble);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("playerDead", get_playerDead, null);
		L.RegVar("heroDic", get_heroDic, null);
		L.RegVar("heros", get_heros, null);
		L.RegVar("deadHeroDic", get_deadHeroDic, null);
		L.RegVar("DeadHeroIdList", get_DeadHeroIdList, null);
		L.RegVar("skillInfos", get_skillInfos, null);
		L.RegVar("tickCD", get_tickCD, set_tickCD);
		L.RegVar("lastTickTime", get_lastTickTime, set_lastTickTime);
		L.RegVar("comboHeroDic", get_comboHeroDic, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.HeroEntity o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, null);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComboHero(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.HeroEntity o = obj.GetComboHero(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeroInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Hero.Model.HeroInfo o = obj.GetHeroInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Player.Model.PlayerInfo o = obj.GetPlayerInfo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SortSkillInfos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.SortSkillInfos();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.CreateHeros();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloneHero(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.CloneHero(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateAeon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.CharacterEntity));
			Logic.Character.HeroEntity o = obj.CreateAeon(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.ClearHeros();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearComboHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearComboHeros(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAeons(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearAeons(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHerosCD2Zero(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.SetHerosCD2Zero();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reborn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.CharacterEntity));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.Reborn(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Run_Scene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.Run_Scene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Victory_Scene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.Victory_Scene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RunWithoutMove_Scene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.RunWithoutMove_Scene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRun_Scene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.EndRun_Scene();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HeroTrigger(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.HeroTrigger(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowHPBarViews(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowHPBarViews(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.HeroEntity o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeadHeroById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.HeroEntity o = obj.GetDeadHeroById(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLimitBuffs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.RemoveLimitBuffs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHaloBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.AddHaloBuff();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEnemyHaloBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.EnemyEntity arg0 = (Logic.Character.EnemyEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.EnemyEntity));
			obj.RemoveEnemyHaloBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFormationBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			obj.AddFormationBuff();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.Remove(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Logic.Character.HeroEntity arg1 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 3, typeof(Logic.Character.HeroEntity));
			obj.SwitchHeros(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetComboSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.ResetComboSkill(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasFloatHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool o = obj.HasFloatHeros();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasTumbleHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool o = obj.HasTumbleHeros();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanFlaot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanFlaot(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanSkill1Float(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanSkill1Float(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanSkill2Float(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanSkill2Float(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanTumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanTumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanSkill1Tumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanSkill1Tumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanSkill2Tumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanSkill2Tumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasCanOrderFloatHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool o = obj.HasCanOrderFloatHeros();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasCanOrderTumbleHeros(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			bool o = obj.HasCanOrderTumbleHeros();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderFlaot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderFlaot(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderSkill1Float(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderSkill1Float(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderSkill2Float(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderSkill2Float(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderTumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderTumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderSkill1Tumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderSkill1Tumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanOrderSkill2Tumble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)ToLua.CheckObject(L, 1, typeof(Logic.Character.Controller.PlayerController));
			Logic.Character.HeroEntity arg0 = (Logic.Character.HeroEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.HeroEntity));
			bool o = obj.CanOrderSkill2Tumble(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			bool ret = obj.playerDead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playerDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heroDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.Dictionary<uint,Logic.Character.HeroEntity> ret = obj.heroDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index heroDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heros(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.List<Logic.Character.HeroEntity> ret = obj.heros;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index heros on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deadHeroDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.Dictionary<uint,Logic.Character.HeroEntity> ret = obj.deadHeroDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index deadHeroDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadHeroIdList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.List<int> ret = obj.DeadHeroIdList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadHeroIdList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skillInfos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.List<Logic.Skill.Model.SkillInfo> ret = obj.skillInfos;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skillInfos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tickCD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			bool ret = obj.tickCD;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tickCD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastTickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			float ret = obj.lastTickTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastTickTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_comboHeroDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			System.Collections.Generic.Dictionary<uint,Logic.Character.HeroEntity> ret = obj.comboHeroDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index comboHeroDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tickCD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.tickCD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tickCD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastTickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.Controller.PlayerController obj = (Logic.Character.Controller.PlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lastTickTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastTickTime on a nil value" : e.Message);
		}
	}
}

