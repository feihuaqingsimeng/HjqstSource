//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Common_Animators_AnimatorUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("AnimatorUtil");
		L.RegFunction("isTargetState", isTargetState);
		L.RegFunction("Play", Play);
		L.RegFunction("CrossFade", CrossFade);
		L.RegFunction("SetTrigger", SetTrigger);
		L.RegFunction("SetBool", SetBool);
		L.RegFunction("GetBool", GetBool);
		L.RegVar("BASE_LAYER", get_BASE_LAYER, null);
		L.RegVar("DEAD", get_DEAD, null);
		L.RegVar("RUN", get_RUN, null);
		L.RegVar("ENDRUN", get_ENDRUN, null);
		L.RegVar("VICOTRY", get_VICOTRY, null);
		L.RegVar("FLOATING", get_FLOATING, null);
		L.RegVar("TUMBLE", get_TUMBLE, null);
		L.RegVar("SWIMMY", get_SWIMMY, null);
		L.RegVar("IDLE_ID", get_IDLE_ID, set_IDLE_ID);
		L.RegVar("DEAD_ID", get_DEAD_ID, set_DEAD_ID);
		L.RegVar("RUN_ID", get_RUN_ID, set_RUN_ID);
		L.RegVar("ENDRUN_ID", get_ENDRUN_ID, set_ENDRUN_ID);
		L.RegVar("VICOTRY_ID", get_VICOTRY_ID, set_VICOTRY_ID);
		L.RegVar("GETHIT_1_ID", get_GETHIT_1_ID, set_GETHIT_1_ID);
		L.RegVar("GETHIT_2_ID", get_GETHIT_2_ID, set_GETHIT_2_ID);
		L.RegVar("HIT_1_ID", get_HIT_1_ID, set_HIT_1_ID);
		L.RegVar("HIT_2_ID", get_HIT_2_ID, set_HIT_2_ID);
		L.RegVar("FLOATSTART_ID", get_FLOATSTART_ID, set_FLOATSTART_ID);
		L.RegVar("FLOATGETHIT_ID", get_FLOATGETHIT_ID, set_FLOATGETHIT_ID);
		L.RegVar("FLOATDOWN_ID", get_FLOATDOWN_ID, set_FLOATDOWN_ID);
		L.RegVar("FLOATING_ID", get_FLOATING_ID, set_FLOATING_ID);
		L.RegVar("SKILL_1_ID", get_SKILL_1_ID, set_SKILL_1_ID);
		L.RegVar("SKILL_2_ID", get_SKILL_2_ID, set_SKILL_2_ID);
		L.RegVar("TUMBLE_ID", get_TUMBLE_ID, set_TUMBLE_ID);
		L.RegVar("GETUP_ID", get_GETUP_ID, set_GETUP_ID);
		L.RegVar("TUMBLESTART_ID", get_TUMBLESTART_ID, set_TUMBLESTART_ID);
		L.RegVar("TUMBLEGETHIT_ID", get_TUMBLEGETHIT_ID, set_TUMBLEGETHIT_ID);
		L.RegVar("BOOT_ID", get_BOOT_ID, set_BOOT_ID);
		L.RegVar("STUN_ID", get_STUN_ID, set_STUN_ID);
		L.RegVar("SWIMMY_ID", get_SWIMMY_ID, set_SWIMMY_ID);
		L.RegVar("TRANSFORM_ID", get_TRANSFORM_ID, set_TRANSFORM_ID);
		L.RegVar("VICTORY_02_ID", get_VICTORY_02_ID, set_VICTORY_02_ID);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isTargetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = Common.Animators.AnimatorUtil.isTargetState(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			Common.Animators.AnimatorUtil.Play(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			Common.Animators.AnimatorUtil.CrossFade(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTrigger(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			string arg1 = ToLua.CheckString(L, 2);
			Common.Animators.AnimatorUtil.SetTrigger(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			Common.Animators.AnimatorUtil.SetBool(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.Animator));
			string arg1 = ToLua.CheckString(L, 2);
			bool o = Common.Animators.AnimatorUtil.GetBool(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BASE_LAYER(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.BASE_LAYER);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEAD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.DEAD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RUN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.RUN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENDRUN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.ENDRUN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VICOTRY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.VICOTRY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FLOATING(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.FLOATING);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TUMBLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.TUMBLE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SWIMMY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Common.Animators.AnimatorUtil.SWIMMY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IDLE_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.IDLE_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEAD_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.DEAD_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RUN_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.RUN_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ENDRUN_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.ENDRUN_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VICOTRY_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.VICOTRY_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GETHIT_1_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.GETHIT_1_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GETHIT_2_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.GETHIT_2_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HIT_1_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.HIT_1_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HIT_2_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.HIT_2_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FLOATSTART_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.FLOATSTART_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FLOATGETHIT_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.FLOATGETHIT_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FLOATDOWN_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.FLOATDOWN_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FLOATING_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.FLOATING_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_1_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.SKILL_1_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_2_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.SKILL_2_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TUMBLE_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.TUMBLE_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GETUP_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.GETUP_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TUMBLESTART_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.TUMBLESTART_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TUMBLEGETHIT_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.TUMBLEGETHIT_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BOOT_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.BOOT_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STUN_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.STUN_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SWIMMY_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.SWIMMY_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TRANSFORM_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.TRANSFORM_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VICTORY_02_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Common.Animators.AnimatorUtil.VICTORY_02_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IDLE_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.IDLE_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DEAD_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.DEAD_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RUN_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.RUN_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ENDRUN_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.ENDRUN_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VICOTRY_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.VICOTRY_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GETHIT_1_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.GETHIT_1_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GETHIT_2_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.GETHIT_2_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HIT_1_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.HIT_1_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HIT_2_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.HIT_2_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FLOATSTART_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.FLOATSTART_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FLOATGETHIT_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.FLOATGETHIT_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FLOATDOWN_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.FLOATDOWN_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FLOATING_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.FLOATING_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_1_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.SKILL_1_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_2_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.SKILL_2_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TUMBLE_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.TUMBLE_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GETUP_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.GETUP_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TUMBLESTART_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.TUMBLESTART_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TUMBLEGETHIT_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.TUMBLEGETHIT_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BOOT_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.BOOT_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_STUN_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.STUN_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SWIMMY_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.SWIMMY_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TRANSFORM_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.TRANSFORM_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VICTORY_02_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Common.Animators.AnimatorUtil.VICTORY_02_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

