//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Model_View_ModelRotateAndAnimWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Model.View.ModelRotateAndAnim), typeof(Logic.Model.View.ModelBehaviour));
		L.RegFunction("ClickBehavior", ClickBehavior);
		L.RegFunction("Rotate", Rotate);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("canClick", get_canClick, set_canClick);
		L.RegVar("canDrag", get_canDrag, set_canDrag);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClickBehavior(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)ToLua.CheckObject(L, 1, typeof(Logic.Model.View.ModelRotateAndAnim));
			obj.ClickBehavior();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rotate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)ToLua.CheckObject(L, 1, typeof(Logic.Model.View.ModelRotateAndAnim));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Rotate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)o;
			bool ret = obj.canClick;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)o;
			bool ret = obj.canDrag;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canDrag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canClick(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canClick = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canClick on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Model.View.ModelRotateAndAnim obj = (Logic.Model.View.ModelRotateAndAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canDrag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canDrag on a nil value" : e.Message);
		}
	}
}

