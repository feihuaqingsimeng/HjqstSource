//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_DayOfWeekWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.DayOfWeek));
		L.RegVar("Sunday", get_Sunday, null);
		L.RegVar("Monday", get_Monday, null);
		L.RegVar("Tuesday", get_Tuesday, null);
		L.RegVar("Wednesday", get_Wednesday, null);
		L.RegVar("Thursday", get_Thursday, null);
		L.RegVar("Friday", get_Friday, null);
		L.RegVar("Saturday", get_Saturday, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sunday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Sunday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Monday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Monday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tuesday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Tuesday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Wednesday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Wednesday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Thursday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Thursday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Friday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Friday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Saturday(IntPtr L)
	{
		ToLua.Push(L, System.DayOfWeek.Saturday);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		System.DayOfWeek o = (System.DayOfWeek)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

