//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Character_CharacterEntityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Character.CharacterEntity), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("CreateHeroEntity", CreateHeroEntity);
		L.RegFunction("CreateHeroEntityAsUIElement", CreateHeroEntityAsUIElement);
		L.RegFunction("CreateHeroEntityAsUIElementByHeroInfoLuaTable", CreateHeroEntityAsUIElementByHeroInfoLuaTable);
		L.RegFunction("CreateHeroEntityAs3DUIElementByHeroInfoLuaTable", CreateHeroEntityAs3DUIElementByHeroInfoLuaTable);
		L.RegFunction("CreateHeroEntityAs3DUIElement", CreateHeroEntityAs3DUIElement);
		L.RegFunction("CreatePlayerEntity", CreatePlayerEntity);
		L.RegFunction("CreateEnemyPlayerEntity", CreateEnemyPlayerEntity);
		L.RegFunction("CreatePlayerEntityAsUIElement", CreatePlayerEntityAsUIElement);
		L.RegFunction("CreatePlayerEntityAsUIElementByPlayerInfoLuaTable", CreatePlayerEntityAsUIElementByPlayerInfoLuaTable);
		L.RegFunction("CreatePlayerEntityAs3DUIElement", CreatePlayerEntityAs3DUIElement);
		L.RegFunction("CreatePlayerEntityAs3DUIElementByPlayerInfoLuaTable", CreatePlayerEntityAs3DUIElementByPlayerInfoLuaTable);
		L.RegFunction("CreateEnemyEntity", CreateEnemyEntity);
		L.RegFunction("CreatePetEntiy", CreatePetEntiy);
		L.RegFunction("CreateHeroEntityAsUIElementAsyn", CreateHeroEntityAsUIElementAsyn);
		L.RegFunction("CreatePlayerEntityAsUIElementAsyn", CreatePlayerEntityAsUIElementAsyn);
		L.RegFunction("GetShadowSize", GetShadowSize);
		L.RegFunction("GetBuffIcons", GetBuffIcons);
		L.RegFunction("AddBuffIcon", AddBuffIcon);
		L.RegFunction("AddBuffIconEndTime", AddBuffIconEndTime);
		L.RegFunction("RemoveBuffIcon", RemoveBuffIcon);
		L.RegFunction("ClearBuff", ClearBuff);
		L.RegFunction("PlayBuffEffect", PlayBuffEffect);
		L.RegFunction("AddBuff", AddBuff);
		L.RegFunction("RemoveBuff", RemoveBuff);
		L.RegFunction("ExistBuff", ExistBuff);
		L.RegFunction("GetBuffs", GetBuffs);
		L.RegFunction("GetBuffsValue", GetBuffsValue);
		L.RegFunction("DisperseBuff", DisperseBuff);
		L.RegFunction("UpdateDamageBuffs", UpdateDamageBuffs);
		L.RegFunction("UpdateAttackBuffs", UpdateAttackBuffs);
		L.RegFunction("AddHaloBuff", AddHaloBuff);
		L.RegFunction("RemoveHaloBuff", RemoveHaloBuff);
		L.RegFunction("SetOrderable", SetOrderable);
		L.RegFunction("Reborn", Reborn);
		L.RegFunction("ResetSkillOrder", ResetSkillOrder);
		L.RegFunction("ExistSkill", ExistSkill);
		L.RegFunction("CanPlaySkill", CanPlaySkill);
		L.RegFunction("GetSkillInfoById", GetSkillInfoById);
		L.RegFunction("PlaySkill", PlaySkill);
		L.RegFunction("ResetCD", ResetCD);
		L.RegFunction("SetStatus", SetStatus);
		L.RegFunction("ResetStatus", ResetStatus);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("hpBarView", get_hpBarView, set_hpBarView);
		L.RegVar("anim", get_anim, set_anim);
		L.RegVar("characterName", get_characterName, set_characterName);
		L.RegVar("OnHPChange", get_OnHPChange, set_OnHPChange);
		L.RegVar("rootNode", get_rootNode, set_rootNode);
		L.RegVar("isPlayer", get_isPlayer, set_isPlayer);
		L.RegVar("isRole", get_isRole, set_isRole);
		L.RegVar("moveBroken", get_moveBroken, set_moveBroken);
		L.RegVar("bornEffect", get_bornEffect, set_bornEffect);
		L.RegVar("positionData", get_positionData, set_positionData);
		L.RegVar("addedHaloBuff", get_addedHaloBuff, set_addedHaloBuff);
		L.RegVar("lastTickTime", get_lastTickTime, set_lastTickTime);
		L.RegVar("tickCD", get_tickCD, set_tickCD);
		L.RegVar("positionId", get_positionId, set_positionId);
		L.RegVar("pos", get_pos, set_pos);
		L.RegVar("eulerAngles", get_eulerAngles, set_eulerAngles);
		L.RegVar("scale", get_scale, set_scale);
		L.RegVar("height", get_height, set_height);
		L.RegVar("characterInfo", get_characterInfo, set_characterInfo);
		L.RegVar("status", get_status, null);
		L.RegVar("buffDic", get_buffDic, null);
		L.RegVar("Swimmy", get_Swimmy, null);
		L.RegVar("Frozen", get_Frozen, null);
		L.RegVar("Sleep", get_Sleep, null);
		L.RegVar("Landification", get_Landification, null);
		L.RegVar("Tieup", get_Tieup, null);
		L.RegVar("Invincible", get_Invincible, null);
		L.RegVar("ImmunePhysicsAttack", get_ImmunePhysicsAttack, null);
		L.RegVar("ImmuneMagicAttack", get_ImmuneMagicAttack, null);
		L.RegVar("Tag", get_Tag, null);
		L.RegVar("Silence", get_Silence, null);
		L.RegVar("Blind", get_Blind, null);
		L.RegVar("Float", get_Float, null);
		L.RegVar("Tumble", get_Tumble, null);
		L.RegVar("controled", get_controled, null);
		L.RegVar("damageImmuneTime", get_damageImmuneTime, null);
		L.RegVar("damageImmuneCount", get_damageImmuneCount, null);
		L.RegVar("shieldValue", get_shieldValue, null);
		L.RegVar("HP", get_HP, set_HP);
		L.RegVar("maxHP", get_maxHP, null);
		L.RegVar("floatable", get_floatable, null);
		L.RegVar("physicsAttack", get_physicsAttack, null);
		L.RegVar("magicAttack", get_magicAttack, null);
		L.RegVar("physicsDefense", get_physicsDefense, null);
		L.RegVar("magicDefense", get_magicDefense, null);
		L.RegVar("speed", get_speed, null);
		L.RegVar("hit", get_hit, null);
		L.RegVar("dodge", get_dodge, null);
		L.RegVar("crit", get_crit, null);
		L.RegVar("antiCrit", get_antiCrit, null);
		L.RegVar("block", get_block, null);
		L.RegVar("antiBlock", get_antiBlock, null);
		L.RegVar("counterAtk", get_counterAtk, null);
		L.RegVar("critHurtAdd", get_critHurtAdd, null);
		L.RegVar("critHurtDec", get_critHurtDec, null);
		L.RegVar("armor", get_armor, null);
		L.RegVar("damageDec", get_damageDec, null);
		L.RegVar("damageAdd", get_damageAdd, null);
		L.RegVar("skill1CD", get_skill1CD, set_skill1CD);
		L.RegVar("skill2CD", get_skill2CD, set_skill2CD);
		L.RegVar("isInPlace", get_isInPlace, null);
		L.RegVar("canOrderTime", get_canOrderTime, set_canOrderTime);
		L.RegVar("canOrderSkill", get_canOrderSkill, null);
		L.RegVar("canOrderSkill1", get_canOrderSkill1, set_canOrderSkill1);
		L.RegVar("canOrderSkill2", get_canOrderSkill2, set_canOrderSkill2);
		L.RegVar("canPlayHit", get_canPlayHit, null);
		L.RegVar("canPlaySkill1", get_canPlaySkill1, null);
		L.RegVar("canPlaySkill2", get_canPlaySkill2, null);
		L.RegVar("canPlayAnimator", get_canPlayAnimator, null);
		L.RegVar("canAttack", get_canAttack, null);
		L.RegVar("isDead", get_isDead, set_isDead);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntity(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(System.Action<Logic.Character.HeroEntity>), typeof(bool)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				System.Action<Logic.Character.HeroEntity> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<Logic.Character.HeroEntity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.HeroEntity>), func) as System.Action<Logic.Character.HeroEntity>;
				}

				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				Logic.Character.CharacterEntity.CreateHeroEntity(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreateHeroEntity");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntityAsUIElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntityAsUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(string), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntityAsUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool), typeof(System.Action<Logic.Character.HeroEntity>)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.Action<Logic.Character.HeroEntity> arg4 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (System.Action<Logic.Character.HeroEntity>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.HeroEntity>), func) as System.Action<Logic.Character.HeroEntity>;
				}

				Logic.Character.CharacterEntity.CreateHeroEntityAsUIElement(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreateHeroEntityAsUIElement");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntityAsUIElementByHeroInfoLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntityAsUIElementByHeroInfoLuaTable(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntityAs3DUIElementByHeroInfoLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntityAs3DUIElementByHeroInfoLuaTable(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntityAs3DUIElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.HeroEntity o = Logic.Character.CharacterEntity.CreateHeroEntityAs3DUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool), typeof(System.Action<Logic.Character.HeroEntity>)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.Action<Logic.Character.HeroEntity> arg4 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (System.Action<Logic.Character.HeroEntity>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.HeroEntity>), func) as System.Action<Logic.Character.HeroEntity>;
				}

				Logic.Character.CharacterEntity.CreateHeroEntityAs3DUIElement(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreateHeroEntityAs3DUIElement");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntity(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(System.Action<Logic.Character.PlayerEntity>), typeof(bool)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				System.Action<Logic.Character.PlayerEntity> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<Logic.Character.PlayerEntity>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PlayerEntity>), func) as System.Action<Logic.Character.PlayerEntity>;
				}

				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.CharacterEntity.CreatePlayerEntity(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreatePlayerEntity");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateEnemyPlayerEntity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				Logic.Character.EnemyPlayerEntity o = Logic.Character.CharacterEntity.CreateEnemyPlayerEntity(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(System.Action<Logic.Character.EnemyPlayerEntity>), typeof(bool)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				System.Action<Logic.Character.EnemyPlayerEntity> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<Logic.Character.EnemyPlayerEntity>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.EnemyPlayerEntity>), func) as System.Action<Logic.Character.EnemyPlayerEntity>;
				}

				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.CharacterEntity.CreateEnemyPlayerEntity(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreateEnemyPlayerEntity");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntityAsUIElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerData)))
			{
				Logic.Player.Model.PlayerData arg0 = (Logic.Player.Model.PlayerData)ToLua.ToObject(L, 1);
				Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerData), typeof(System.Action<Logic.Character.PlayerEntity>)))
			{
				Logic.Player.Model.PlayerData arg0 = (Logic.Player.Model.PlayerData)ToLua.ToObject(L, 1);
				System.Action<Logic.Character.PlayerEntity> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<Logic.Character.PlayerEntity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PlayerEntity>), func) as System.Action<Logic.Character.PlayerEntity>;
				}

				Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, typeof(int), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool), typeof(System.Action<Logic.Character.PlayerEntity>), typeof(System.Action<Logic.Character.PetEntity>)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.Action<Logic.Character.PlayerEntity> arg4 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (System.Action<Logic.Character.PlayerEntity>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PlayerEntity>), func) as System.Action<Logic.Character.PlayerEntity>;
				}

				System.Action<Logic.Character.PetEntity> arg5 = null;
				LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

				if (funcType6 != LuaTypes.LUA_TFUNCTION)
				{
					 arg5 = (System.Action<Logic.Character.PetEntity>)ToLua.ToObject(L, 6);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 6);
					arg5 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PetEntity>), func) as System.Action<Logic.Character.PetEntity>;
				}

				Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElement");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntityAsUIElementByPlayerInfoLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElementByPlayerInfoLuaTable(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntityAs3DUIElement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAs3DUIElement(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, typeof(Logic.Player.Model.PlayerInfo), typeof(UnityEngine.Transform), typeof(bool), typeof(bool), typeof(System.Action<Logic.Character.PlayerEntity>)))
			{
				Logic.Player.Model.PlayerInfo arg0 = (Logic.Player.Model.PlayerInfo)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.Action<Logic.Character.PlayerEntity> arg4 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (System.Action<Logic.Character.PlayerEntity>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PlayerEntity>), func) as System.Action<Logic.Character.PlayerEntity>;
				}

				Logic.Character.CharacterEntity.CreatePlayerEntityAs3DUIElement(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreatePlayerEntityAs3DUIElement");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntityAs3DUIElementByPlayerInfoLuaTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			Logic.Character.PlayerEntity o = Logic.Character.CharacterEntity.CreatePlayerEntityAs3DUIElementByPlayerInfoLuaTable(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateEnemyEntity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				Logic.Character.EnemyEntity o = Logic.Character.CharacterEntity.CreateEnemyEntity(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Logic.Hero.Model.HeroInfo), typeof(System.Action<Logic.Character.EnemyEntity>), typeof(bool)))
			{
				Logic.Hero.Model.HeroInfo arg0 = (Logic.Hero.Model.HeroInfo)ToLua.ToObject(L, 1);
				System.Action<Logic.Character.EnemyEntity> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<Logic.Character.EnemyEntity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.EnemyEntity>), func) as System.Action<Logic.Character.EnemyEntity>;
				}

				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				Logic.Character.CharacterEntity.CreateEnemyEntity(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreateEnemyEntity");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePetEntiy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				Logic.Character.PetEntity o = Logic.Character.CharacterEntity.CreatePetEntiy(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, typeof(string), typeof(System.Action<Logic.Character.PetEntity>)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Action<Logic.Character.PetEntity> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<Logic.Character.PetEntity>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PetEntity>), func) as System.Action<Logic.Character.PetEntity>;
				}

				Logic.Character.CharacterEntity.CreatePetEntiy(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.CreatePetEntiy");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHeroEntityAsUIElementAsyn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			System.Action<Logic.Character.HeroEntity> arg4 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<Logic.Character.HeroEntity>)ToLua.CheckObject(L, 5, typeof(System.Action<Logic.Character.HeroEntity>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.HeroEntity>), func) as System.Action<Logic.Character.HeroEntity>;
			}

			Logic.Character.CharacterEntity.CreateHeroEntityAsUIElementAsyn(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayerEntityAsUIElementAsyn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			System.Action<Logic.Character.PlayerEntity> arg4 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<Logic.Character.PlayerEntity>)ToLua.CheckObject(L, 5, typeof(System.Action<Logic.Character.PlayerEntity>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PlayerEntity>), func) as System.Action<Logic.Character.PlayerEntity>;
			}

			System.Action<Logic.Character.PetEntity> arg5 = null;
			LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

			if (funcType6 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (System.Action<Logic.Character.PetEntity>)ToLua.CheckObject(L, 6, typeof(System.Action<Logic.Character.PetEntity>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 6);
				arg5 = DelegateFactory.CreateDelegate(typeof(System.Action<Logic.Character.PetEntity>), func) as System.Action<Logic.Character.PetEntity>;
			}

			Logic.Character.CharacterEntity.CreatePlayerEntityAsUIElementAsyn(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShadowSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Enums.ShadowType arg0 = (Logic.Enums.ShadowType)ToLua.CheckObject(L, 1, typeof(Logic.Enums.ShadowType));
			UnityEngine.Vector2 o = Logic.Character.CharacterEntity.GetShadowSize(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffIcons(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			System.Collections.Generic.List<string> o = obj.GetBuffIcons();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBuffIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.AddBuffIcon(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBuffIconEndTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.AddBuffIconEndTime(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBuffIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveBuffIcon(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.ClearBuff();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBuffEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Skill.Model.MechanicsData arg0 = (Logic.Skill.Model.MechanicsData)ToLua.CheckObject(L, 2, typeof(Logic.Skill.Model.MechanicsData));
			Logic.Enums.BuffType arg1 = (Logic.Enums.BuffType)ToLua.CheckObject(L, 3, typeof(Logic.Enums.BuffType));
			obj.PlayBuffEffect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBuff(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 8 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Character.CharacterEntity), typeof(Logic.Skill.Model.MechanicsData), typeof(Logic.Enums.BuffType), typeof(float), typeof(float), typeof(int), typeof(float)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 2);
				Logic.Skill.Model.MechanicsData arg1 = (Logic.Skill.Model.MechanicsData)ToLua.ToObject(L, 3);
				Logic.Enums.BuffType arg2 = (Logic.Enums.BuffType)ToLua.ToObject(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 7);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 8);
				Logic.Character.Model.BuffInfo o = obj.AddBuff(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 14 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Character.CharacterEntity), typeof(Logic.Character.CharacterEntity), typeof(Logic.Skill.Model.SkillInfo), typeof(Logic.Skill.Model.MechanicsData), typeof(Logic.Enums.BuffType), typeof(Logic.Enums.SkillLevelBuffAddType), typeof(Logic.Enums.BuffAddType), typeof(float), typeof(float), typeof(uint), typeof(int), typeof(bool), typeof(bool)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 2);
				Logic.Character.CharacterEntity arg1 = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 3);
				Logic.Skill.Model.SkillInfo arg2 = (Logic.Skill.Model.SkillInfo)ToLua.ToObject(L, 4);
				Logic.Skill.Model.MechanicsData arg3 = (Logic.Skill.Model.MechanicsData)ToLua.ToObject(L, 5);
				Logic.Enums.BuffType arg4 = (Logic.Enums.BuffType)ToLua.ToObject(L, 6);
				Logic.Enums.SkillLevelBuffAddType arg5 = (Logic.Enums.SkillLevelBuffAddType)ToLua.ToObject(L, 7);
				Logic.Enums.BuffAddType arg6 = (Logic.Enums.BuffAddType)ToLua.ToObject(L, 8);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 9);
				float arg8 = (float)LuaDLL.lua_tonumber(L, 10);
				uint arg9 = (uint)LuaDLL.lua_tonumber(L, 11);
				int arg10 = (int)LuaDLL.lua_tonumber(L, 12);
				bool arg11 = LuaDLL.lua_toboolean(L, 13);
				bool arg12 = LuaDLL.lua_toboolean(L, 14);
				Logic.Character.Model.BuffInfo o = obj.AddBuff(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 15 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Character.CharacterEntity), typeof(Logic.Character.CharacterEntity), typeof(Logic.Skill.Model.SkillInfo), typeof(Logic.Skill.Model.MechanicsData), typeof(Logic.Enums.BuffType), typeof(Logic.Enums.SkillLevelBuffAddType), typeof(Logic.Enums.BuffAddType), typeof(int), typeof(uint), typeof(float), typeof(uint), typeof(int), typeof(bool), typeof(bool)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 2);
				Logic.Character.CharacterEntity arg1 = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 3);
				Logic.Skill.Model.SkillInfo arg2 = (Logic.Skill.Model.SkillInfo)ToLua.ToObject(L, 4);
				Logic.Skill.Model.MechanicsData arg3 = (Logic.Skill.Model.MechanicsData)ToLua.ToObject(L, 5);
				Logic.Enums.BuffType arg4 = (Logic.Enums.BuffType)ToLua.ToObject(L, 6);
				Logic.Enums.SkillLevelBuffAddType arg5 = (Logic.Enums.SkillLevelBuffAddType)ToLua.ToObject(L, 7);
				Logic.Enums.BuffAddType arg6 = (Logic.Enums.BuffAddType)ToLua.ToObject(L, 8);
				int arg7 = (int)LuaDLL.lua_tonumber(L, 9);
				uint arg8 = (uint)LuaDLL.lua_tonumber(L, 10);
				float arg9 = (float)LuaDLL.lua_tonumber(L, 11);
				uint arg10 = (uint)LuaDLL.lua_tonumber(L, 12);
				int arg11 = (int)LuaDLL.lua_tonumber(L, 13);
				bool arg12 = LuaDLL.lua_toboolean(L, 14);
				bool arg13 = LuaDLL.lua_toboolean(L, 15);
				Logic.Character.Model.BuffInfo o = obj.AddBuff(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.AddBuff");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.BuffType));
			obj.RemoveBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExistBuff(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Enums.BuffType)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.ToObject(L, 2);
				bool o = obj.ExistBuff(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Enums.BuffType), typeof(bool)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.ExistBuff(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.ExistBuff");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Enums.BuffType)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.ToObject(L, 2);
				System.Collections.Generic.List<Logic.Character.Model.BuffInfo> o = obj.GetBuffs(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Logic.Character.CharacterEntity), typeof(Logic.Enums.BuffType), typeof(uint)))
			{
				Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.ToObject(L, 1);
				Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				System.Collections.Generic.List<Logic.Character.Model.BuffInfo> o = obj.GetBuffs(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Character.CharacterEntity.GetBuffs");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffsValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.BuffType));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float o = obj.GetBuffsValue(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisperseBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Enums.BuffType arg0 = (Logic.Enums.BuffType)ToLua.CheckObject(L, 2, typeof(Logic.Enums.BuffType));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.DisperseBuff(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateDamageBuffs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.UpdateDamageBuffs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateAttackBuffs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.UpdateAttackBuffs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHaloBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.AddHaloBuff();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveHaloBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Character.CharacterEntity arg0 = (Logic.Character.CharacterEntity)ToLua.CheckUnityObject(L, 2, typeof(Logic.Character.CharacterEntity));
			obj.RemoveHaloBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOrderable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.SetOrderable();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reborn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Reborn(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetSkillOrder(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.ResetSkillOrder(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExistSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.ExistSkill(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanPlaySkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.CanPlaySkill(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSkillInfoById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Logic.Skill.Model.SkillInfo o = obj.GetSkillInfoById(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Skill.Model.SkillInfo arg0 = (Logic.Skill.Model.SkillInfo)ToLua.CheckObject(L, 2, typeof(Logic.Skill.Model.SkillInfo));
			obj.PlaySkill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetCD(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Skill.Model.SkillInfo arg0 = (Logic.Skill.Model.SkillInfo)ToLua.CheckObject(L, 2, typeof(Logic.Skill.Model.SkillInfo));
			obj.ResetCD(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			Logic.Enums.Status arg0 = (Logic.Enums.Status)ToLua.CheckObject(L, 2, typeof(Logic.Enums.Status));
			obj.SetStatus(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)ToLua.CheckObject(L, 1, typeof(Logic.Character.CharacterEntity));
			obj.ResetStatus();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hpBarView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.UI.HPBar.View.HPBarView ret = obj.hpBarView;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpBarView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_anim(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Animator ret = obj.anim;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index anim on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_characterName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			string ret = obj.characterName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index characterName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHPChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			System.Action ret = obj.OnHPChange;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnHPChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rootNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.GameObject ret = obj.rootNode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rootNode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.isPlayer;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isPlayer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRole(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.isRole;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isRole on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_moveBroken(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.moveBroken;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveBroken on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bornEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.bornEffect;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bornEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_positionData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.Position.Model.PositionData ret = obj.positionData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index positionData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_addedHaloBuff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.addedHaloBuff;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index addedHaloBuff on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastTickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.lastTickTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastTickTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tickCD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.tickCD;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tickCD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_positionId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			uint ret = obj.positionId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index positionId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 ret = obj.pos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eulerAngles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 ret = obj.eulerAngles;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index eulerAngles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 ret = obj.scale;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.height;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index height on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_characterInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.Character.Model.CharacterBaseInfo ret = obj.characterInfo;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index characterInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.Enums.Status ret = obj.status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_buffDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			System.Collections.Generic.Dictionary<Logic.Enums.BuffType,System.Collections.Generic.List<Logic.Character.Model.BuffInfo>> ret = obj.buffDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index buffDic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Swimmy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Swimmy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Swimmy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Frozen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Frozen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Frozen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sleep(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Sleep;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Sleep on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Landification(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Landification;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Landification on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tieup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Tieup;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Tieup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Invincible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Invincible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Invincible on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmunePhysicsAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.ImmunePhysicsAttack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ImmunePhysicsAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmuneMagicAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.ImmuneMagicAttack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ImmuneMagicAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Tag;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Tag on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Silence(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Silence;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Silence on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Blind(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Blind;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Blind on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Float;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Float on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tumble(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.Tumble;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Tumble on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_controled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.controled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index controled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_damageImmuneTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.damageImmuneTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damageImmuneTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_damageImmuneCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.damageImmuneCount;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damageImmuneCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shieldValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.shieldValue;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index shieldValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.HP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			uint ret = obj.maxHP;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxHP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_floatable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.floatable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index floatable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_physicsAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.physicsAttack;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index physicsAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_magicAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.magicAttack;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index magicAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_physicsDefense(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.physicsDefense;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index physicsDefense on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_magicDefense(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.magicDefense;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index magicDefense on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int ret = obj.speed;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index speed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.hit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dodge(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.dodge;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dodge on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_crit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.crit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index crit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_antiCrit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.antiCrit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index antiCrit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_block(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.block;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index block on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_antiBlock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.antiBlock;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index antiBlock on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_counterAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.counterAtk;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index counterAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_critHurtAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.critHurtAdd;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index critHurtAdd on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_critHurtDec(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.critHurtDec;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index critHurtDec on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_armor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.armor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index armor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_damageDec(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.damageDec;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damageDec on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_damageAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.damageAdd;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index damageAdd on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skill1CD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.skill1CD;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skill1CD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skill2CD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.skill2CD;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skill2CD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isInPlace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.isInPlace;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isInPlace on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canOrderTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float ret = obj.canOrderTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canOrderSkill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canOrderSkill;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderSkill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canOrderSkill1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canOrderSkill1;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderSkill1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canOrderSkill2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canOrderSkill2;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderSkill2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canPlayHit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canPlayHit;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canPlayHit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canPlaySkill1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canPlaySkill1;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canPlaySkill1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canPlaySkill2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canPlaySkill2;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canPlaySkill2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canPlayAnimator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canPlayAnimator;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canPlayAnimator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.canAttack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canAttack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool ret = obj.isDead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hpBarView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.UI.HPBar.View.HPBarView arg0 = (Logic.UI.HPBar.View.HPBarView)ToLua.CheckUnityObject(L, 2, typeof(Logic.UI.HPBar.View.HPBarView));
			obj.hpBarView = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpBarView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_anim(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Animator));
			obj.anim = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index anim on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_characterName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.characterName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index characterName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHPChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.OnHPChange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnHPChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rootNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.rootNode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rootNode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isPlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isPlayer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isRole(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isRole = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isRole on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_moveBroken(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.moveBroken = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index moveBroken on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bornEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.bornEffect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bornEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_positionData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.Position.Model.PositionData arg0 = (Logic.Position.Model.PositionData)ToLua.CheckObject(L, 2, typeof(Logic.Position.Model.PositionData));
			obj.positionData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index positionData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_addedHaloBuff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.addedHaloBuff = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index addedHaloBuff on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastTickTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lastTickTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastTickTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tickCD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.tickCD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tickCD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_positionId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.positionId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index positionId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.pos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eulerAngles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.eulerAngles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index eulerAngles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.scale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index scale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.height = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index height on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_characterInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			Logic.Character.Model.CharacterBaseInfo arg0 = (Logic.Character.Model.CharacterBaseInfo)ToLua.CheckObject(L, 2, typeof(Logic.Character.Model.CharacterBaseInfo));
			obj.characterInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index characterInfo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.HP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skill1CD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.skill1CD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skill1CD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skill2CD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.skill2CD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skill2CD on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canOrderTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.canOrderTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canOrderSkill1(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canOrderSkill1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderSkill1 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canOrderSkill2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canOrderSkill2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index canOrderSkill2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Character.CharacterEntity obj = (Logic.Character.CharacterEntity)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isDead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isDead on a nil value" : e.Message);
		}
	}
}

