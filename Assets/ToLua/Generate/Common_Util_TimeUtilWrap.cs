//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Common_Util_TimeUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Common.Util.TimeUtil), typeof(System.Object));
		L.RegFunction("FormatTime", FormatTime);
		L.RegFunction("FormatTimeToString", FormatTimeToString);
		L.RegFunction("FormatSecondToMinute", FormatSecondToMinute);
		L.RegFunction("FormatSecondToHour", FormatSecondToHour);
		L.RegFunction("GetTimeStamp", GetTimeStamp);
		L.RegFunction("GetTimeStampBefore10", GetTimeStampBefore10);
		L.RegFunction("GetDiffTime", GetDiffTime);
		L.RegFunction("FormatLastLoginTimeString", FormatLastLoginTimeString);
		L.RegFunction("New", _CreateCommon_Util_TimeUtil);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("zeroDateTime", get_zeroDateTime, set_zeroDateTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCommon_Util_TimeUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Common.Util.TimeUtil obj = new Common.Util.TimeUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Common.Util.TimeUtil.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.DateTime o = Common.Util.TimeUtil.FormatTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				System.DateTime o = Common.Util.TimeUtil.FormatTime(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Common.Util.TimeUtil.FormatTime");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatTimeToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string o = Common.Util.TimeUtil.FormatTimeToString(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatSecondToMinute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Common.Util.TimeUtil.FormatSecondToMinute(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatSecondToHour(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string o = Common.Util.TimeUtil.FormatSecondToHour(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeStamp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				long o = Common.Util.TimeUtil.GetTimeStamp();
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, typeof(System.DateTime)))
			{
				System.DateTime arg0 = (System.DateTime)ToLua.ToObject(L, 1);
				long o = Common.Util.TimeUtil.GetTimeStamp(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Common.Util.TimeUtil.GetTimeStamp");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTimeStampBefore10(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			long o = Common.Util.TimeUtil.GetTimeStampBefore10();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDiffTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 1, typeof(System.DateTime));
			System.DateTime arg1 = (System.DateTime)ToLua.CheckObject(L, 2, typeof(System.DateTime));
			int o = Common.Util.TimeUtil.GetDiffTime(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FormatLastLoginTimeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 1);
			string o = Common.Util.TimeUtil.FormatLastLoginTimeString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zeroDateTime(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, Common.Util.TimeUtil.zeroDateTime);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zeroDateTime(IntPtr L)
	{
		try
		{
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 2, typeof(System.DateTime));
			Common.Util.TimeUtil.zeroDateTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

