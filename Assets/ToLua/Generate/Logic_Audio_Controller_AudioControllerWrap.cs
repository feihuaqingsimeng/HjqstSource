//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Audio_Controller_AudioControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Logic.Audio.Controller.AudioController), typeof(SingletonMono<Logic.Audio.Controller.AudioController>));
		L.RegFunction("SavePlayerPref", SavePlayerPref);
		L.RegFunction("SetBGMusicState", SetBGMusicState);
		L.RegFunction("PlayBGMusic", PlayBGMusic);
		L.RegFunction("PlayAudio", PlayAudio);
		L.RegFunction("PlayAudioRepeat", PlayAudioRepeat);
		L.RegFunction("StopAudio", StopAudio);
		L.RegFunction("StopAll", StopAll);
		L.RegFunction("Clear", Clear);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("SELECTDUNGEON", get_SELECTDUNGEON, null);
		L.RegVar("MAINSCENE", get_MAINSCENE, null);
		L.RegVar("LOGIN", get_LOGIN, null);
		L.RegVar("WIN", get_WIN, null);
		L.RegVar("FAIL", get_FAIL, null);
		L.RegVar("CLICK", get_CLICK, null);
		L.RegVar("CHAT_SEND", get_CHAT_SEND, null);
		L.RegVar("SKILL_CLICK", get_SKILL_CLICK, null);
		L.RegVar("SELECT", get_SELECT, null);
		L.RegConstant("ROLE_VECTORY_AUDIO_ID", 30067);
		L.RegVar("OPEN_AUDIO_BG", get_OPEN_AUDIO_BG, null);
		L.RegVar("OPEN_AUDIO", get_OPEN_AUDIO, null);
		L.RegVar("BATTLE_FAIL_AUDIO", get_BATTLE_FAIL_AUDIO, null);
		L.RegVar("BATTLE_START_AUDIO", get_BATTLE_START_AUDIO, null);
		L.RegVar("BATTLE_VICTORY_AUDIO", get_BATTLE_VICTORY_AUDIO, null);
		L.RegVar("open_box_audio", get_open_box_audio, null);
		L.RegVar("fireworks_audio", get_fireworks_audio, null);
		L.RegVar("account_level_up", get_account_level_up, null);
		L.RegVar("starEvaluate_audio", get_starEvaluate_audio, null);
		L.RegVar("addExp_audio", get_addExp_audio, null);
		L.RegVar("isOpenAudioBg", get_isOpenAudioBg, set_isOpenAudioBg);
		L.RegVar("isOpenAudio", get_isOpenAudio, set_isOpenAudio);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SavePlayerPref(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			obj.SavePlayerPref();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBGMusicState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetBGMusicState(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBGMusic(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Audio.Controller.AudioController), typeof(string)))
			{
				Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.PlayBGMusic(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Audio.Controller.AudioController), typeof(Logic.Enums.FightType)))
			{
				Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.ToObject(L, 1);
				Logic.Enums.FightType arg0 = (Logic.Enums.FightType)ToLua.ToObject(L, 2);
				obj.PlayBGMusic(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Audio.Controller.AudioController.PlayBGMusic");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.PlayAudio(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAudioRepeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.PlayAudioRepeat(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Audio.Controller.AudioController), typeof(UnityEngine.AudioSource)))
			{
				Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.ToObject(L, 1);
				UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.ToObject(L, 2);
				obj.StopAudio(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, typeof(Logic.Audio.Controller.AudioController), typeof(string)))
			{
				Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.StopAudio(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Logic.Audio.Controller.AudioController.StopAudio");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			obj.StopAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)ToLua.CheckObject(L, 1, typeof(Logic.Audio.Controller.AudioController));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SELECTDUNGEON(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.SELECTDUNGEON);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAINSCENE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.MAINSCENE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LOGIN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.LOGIN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WIN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.WIN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FAIL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.FAIL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CLICK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.CLICK);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CHAT_SEND(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.CHAT_SEND);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_CLICK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.SKILL_CLICK);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SELECT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.SELECT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OPEN_AUDIO_BG(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.OPEN_AUDIO_BG);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OPEN_AUDIO(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.OPEN_AUDIO);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BATTLE_FAIL_AUDIO(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.BATTLE_FAIL_AUDIO);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BATTLE_START_AUDIO(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.BATTLE_START_AUDIO);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BATTLE_VICTORY_AUDIO(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.BATTLE_VICTORY_AUDIO);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_open_box_audio(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.open_box_audio);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fireworks_audio(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.fireworks_audio);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_account_level_up(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.account_level_up);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_starEvaluate_audio(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.starEvaluate_audio);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_addExp_audio(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Logic.Audio.Controller.AudioController.addExp_audio);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenAudioBg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)o;
			bool ret = obj.isOpenAudioBg;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isOpenAudioBg on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)o;
			bool ret = obj.isOpenAudio;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isOpenAudio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenAudioBg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isOpenAudioBg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isOpenAudioBg on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Logic.Audio.Controller.AudioController obj = (Logic.Audio.Controller.AudioController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isOpenAudio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isOpenAudio on a nil value" : e.Message);
		}
	}
}

