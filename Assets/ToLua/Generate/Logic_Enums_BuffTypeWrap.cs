//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Logic_Enums_BuffTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Logic.Enums.BuffType));
		L.RegVar("None", get_None, null);
		L.RegVar("Swimmy", get_Swimmy, null);
		L.RegVar("Invincible", get_Invincible, null);
		L.RegVar("Silence", get_Silence, null);
		L.RegVar("Blind", get_Blind, null);
		L.RegVar("Float", get_Float, null);
		L.RegVar("Tumble", get_Tumble, null);
		L.RegVar("Poisoning", get_Poisoning, null);
		L.RegVar("Treat", get_Treat, null);
		L.RegVar("Speed", get_Speed, null);
		L.RegVar("Shield", get_Shield, null);
		L.RegVar("Drain", get_Drain, null);
		L.RegVar("PhysicsDefense", get_PhysicsDefense, null);
		L.RegVar("MagicDefense", get_MagicDefense, null);
		L.RegVar("PhysicsAttack", get_PhysicsAttack, null);
		L.RegVar("MagicAttack", get_MagicAttack, null);
		L.RegVar("HPLimit", get_HPLimit, null);
		L.RegVar("Hit", get_Hit, null);
		L.RegVar("Dodge", get_Dodge, null);
		L.RegVar("Crit", get_Crit, null);
		L.RegVar("AntiCrit", get_AntiCrit, null);
		L.RegVar("Block", get_Block, null);
		L.RegVar("AntiBlock", get_AntiBlock, null);
		L.RegVar("CounterAtk", get_CounterAtk, null);
		L.RegVar("CritHurtAdd", get_CritHurtAdd, null);
		L.RegVar("CritHurtDec", get_CritHurtDec, null);
		L.RegVar("Armor", get_Armor, null);
		L.RegVar("DamageDec", get_DamageDec, null);
		L.RegVar("DamageAdd", get_DamageAdd, null);
		L.RegVar("Frozen", get_Frozen, null);
		L.RegVar("TreatPercent", get_TreatPercent, null);
		L.RegVar("Ignite", get_Ignite, null);
		L.RegVar("Bleed", get_Bleed, null);
		L.RegVar("Sleep", get_Sleep, null);
		L.RegVar("Landification", get_Landification, null);
		L.RegVar("Tieup", get_Tieup, null);
		L.RegVar("GeneralSkillPhysicsAttack", get_GeneralSkillPhysicsAttack, null);
		L.RegVar("GeneralSkillMagicAttack", get_GeneralSkillMagicAttack, null);
		L.RegVar("TargetSkillPhysicsAttack", get_TargetSkillPhysicsAttack, null);
		L.RegVar("TargetSkillMagicAttack", get_TargetSkillMagicAttack, null);
		L.RegVar("Immune", get_Immune, null);
		L.RegVar("Rebound", get_Rebound, null);
		L.RegVar("DamageImmuneTime", get_DamageImmuneTime, null);
		L.RegVar("DamageImmuneCount", get_DamageImmuneCount, null);
		L.RegVar("Weakness", get_Weakness, null);
		L.RegVar("TreatAdd", get_TreatAdd, null);
		L.RegVar("ForceKill", get_ForceKill, null);
		L.RegVar("ImmunePhysicsAttack", get_ImmunePhysicsAttack, null);
		L.RegVar("ImmuneMagicAttack", get_ImmuneMagicAttack, null);
		L.RegVar("Tag", get_Tag, null);
		L.RegVar("GeneralSkillHit", get_GeneralSkillHit, null);
		L.RegVar("GeneralSkillCrit", get_GeneralSkillCrit, null);
		L.RegVar("AccumulatorTag", get_AccumulatorTag, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Swimmy(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Swimmy);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Invincible(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Invincible);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Silence(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Silence);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Blind(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Blind);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Float);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tumble(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Tumble);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Poisoning(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Poisoning);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Treat(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Treat);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Speed(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Speed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shield(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Shield);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Drain(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Drain);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsDefense(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.PhysicsDefense);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicDefense(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.MagicDefense);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PhysicsAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.PhysicsAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MagicAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.MagicAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HPLimit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.HPLimit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Hit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dodge(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Dodge);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Crit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Crit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiCrit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.AntiCrit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Block(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Block);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiBlock(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.AntiBlock);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CounterAtk(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.CounterAtk);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtAdd(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.CritHurtAdd);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CritHurtDec(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.CritHurtDec);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Armor(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Armor);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageDec(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.DamageDec);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageAdd(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.DamageAdd);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Frozen(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Frozen);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TreatPercent(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.TreatPercent);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ignite(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Ignite);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bleed(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Bleed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Sleep(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Sleep);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Landification(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Landification);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tieup(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Tieup);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillPhysicsAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.GeneralSkillPhysicsAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillMagicAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.GeneralSkillMagicAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetSkillPhysicsAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.TargetSkillPhysicsAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetSkillMagicAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.TargetSkillMagicAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Immune(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Immune);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Rebound(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Rebound);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageImmuneTime(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.DamageImmuneTime);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DamageImmuneCount(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.DamageImmuneCount);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Weakness(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Weakness);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TreatAdd(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.TreatAdd);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ForceKill(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.ForceKill);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmunePhysicsAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.ImmunePhysicsAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImmuneMagicAttack(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.ImmuneMagicAttack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.Tag);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillHit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.GeneralSkillHit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GeneralSkillCrit(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.GeneralSkillCrit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccumulatorTag(IntPtr L)
	{
		ToLua.Push(L, Logic.Enums.BuffType.AccumulatorTag);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Logic.Enums.BuffType o = (Logic.Enums.BuffType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

