//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Common_ResMgr_ResMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Common.ResMgr.ResMgr), typeof(SingletonMono<Common.ResMgr.ResMgr>));
		L.RegFunction("LoadStreamingAssetText", LoadStreamingAssetText);
		L.RegFunction("LoadText", LoadText);
		L.RegFunction("LoadBytes", LoadBytes);
		L.RegFunction("Load", Load);
		L.RegFunction("LoadMaterial", LoadMaterial);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("preFightPaths", get_preFightPaths, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadStreamingAssetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.CheckObject(L, 1, typeof(Common.ResMgr.ResMgr));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.LoadStreamingAssetText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.CheckObject(L, 1, typeof(Common.ResMgr.ResMgr));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.LoadText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.CheckObject(L, 1, typeof(Common.ResMgr.ResMgr));
			string arg0 = ToLua.CheckString(L, 2);
			byte[] o = obj.LoadBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Common.ResMgr.ResMgr), typeof(string)))
			{
				Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Object o = obj.Load(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Common.ResMgr.ResMgr), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				obj.Load(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Common.ResMgr.ResMgr.Load");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.CheckObject(L, 1, typeof(Common.ResMgr.ResMgr));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Object o = obj.LoadMaterial(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, typeof(Common.ResMgr.ResMgr), typeof(string)))
			{
				Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Sprite o = obj.LoadSprite(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, typeof(Common.ResMgr.ResMgr), typeof(string), typeof(System.Action<UnityEngine.Sprite>)))
			{
				Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Sprite> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<UnityEngine.Sprite>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Sprite>), func) as System.Action<UnityEngine.Sprite>;
				}

				obj.LoadSprite(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Common.ResMgr.ResMgr.LoadSprite");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_preFightPaths(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.ResMgr.ResMgr obj = (Common.ResMgr.ResMgr)o;
			System.Collections.Generic.List<string> ret = obj.preFightPaths;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index preFightPaths on a nil value" : e.Message);
		}
	}
}

