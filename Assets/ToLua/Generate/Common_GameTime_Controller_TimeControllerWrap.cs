//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Common_GameTime_Controller_TimeControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Common.GameTime.Controller.TimeController), typeof(SingletonMono<Common.GameTime.Controller.TimeController>));
		L.RegFunction("GetDiffTimeWithServerTimeInSecond", GetDiffTimeWithServerTimeInSecond);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("ServerTimeTicksSecond", get_ServerTimeTicksSecond, null);
		L.RegVar("ServerTimeTicksMillisecond", get_ServerTimeTicksMillisecond, set_ServerTimeTicksMillisecond);
		L.RegVar("ServerTimeTicksMillisecondAfter9", get_ServerTimeTicksMillisecondAfter9, set_ServerTimeTicksMillisecondAfter9);
		L.RegVar("ServerTime", get_ServerTime, null);
		L.RegVar("fightSkillTime", get_fightSkillTime, set_fightSkillTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDiffTimeWithServerTimeInSecond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)ToLua.CheckObject(L, 1, typeof(Common.GameTime.Controller.TimeController));
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 2);
			long o = obj.GetDiffTimeWithServerTimeInSecond(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerTimeTicksSecond(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			long ret = obj.ServerTimeTicksSecond;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTimeTicksSecond on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerTimeTicksMillisecond(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			long ret = obj.ServerTimeTicksMillisecond;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTimeTicksMillisecond on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerTimeTicksMillisecondAfter9(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			int ret = obj.ServerTimeTicksMillisecondAfter9;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTimeTicksMillisecondAfter9 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			System.DateTime ret = obj.ServerTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fightSkillTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			float ret = obj.fightSkillTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fightSkillTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerTimeTicksMillisecond(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 2);
			obj.ServerTimeTicksMillisecond = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTimeTicksMillisecond on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerTimeTicksMillisecondAfter9(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ServerTimeTicksMillisecondAfter9 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ServerTimeTicksMillisecondAfter9 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fightSkillTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Common.GameTime.Controller.TimeController obj = (Common.GameTime.Controller.TimeController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.fightSkillTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index fightSkillTime on a nil value" : e.Message);
		}
	}
}

